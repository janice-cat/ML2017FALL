import sys
import csv
import pandas as pd
import numpy as np

##Read in
total = 16281
XTest = [[0 for x in range(total)] for y in range(106)]
np.set_printoptions(threshold=np.inf)


with open(sys.argv[1]) as TrainingData:
        XTest_raw = csv.reader(TrainingData)
        C = -1
        for row in XTest_raw:
                if (C != -1):
                        for R in range(106):
                                XTest[R][C] = float(row[R])

                C = C + 1

XTest = np.matrix(XTest)


w_true = np.matrix([[  4.02715771e-02,   2.80006170e-07,   7.38301851e-05,
           9.26610039e-04,   4.33725251e-02]])
b_true = np.matrix([[-4.92967473]])
w_false = np.matrix([[ -4.02715771e-02,  -2.80006170e-07,  -7.38301851e-05,
          -9.26610039e-04,  -4.33725251e-02]])
b_false = np.matrix([[ 4.92967473]])
P_true = 0.24080955744602439
P_false = 0.75919044255397561
discrete_true = np.array([[  0.00000000e+00,   0.00000000e+00],
       [  0.00000000e+00,   0.00000000e+00],
       [  1.50363474e-01,   8.49636526e-01],
       [  0.00000000e+00,   0.00000000e+00],
       [  0.00000000e+00,   0.00000000e+00],
       [  0.00000000e+00,   0.00000000e+00],
       [  9.52684607e-01,   4.73153934e-02],
       [  9.21311057e-01,   7.86889427e-02],
       [  1.00000000e+00,   0.00000000e+00],
       [  3.67045020e-01,   6.32954980e-01],
       [  9.20673383e-01,   7.93266165e-02],
       [  9.07664839e-01,   9.23351613e-02],
       [  9.54980232e-01,   4.50197679e-02],
       [  1.00000000e+00,   0.00000000e+00],
       [  9.75640862e-01,   2.43591379e-02],
       [  9.92092845e-01,   7.90715470e-03],
       [  9.92347915e-01,   7.65208519e-03],
       [  9.95791353e-01,   4.20864686e-03],
       [  9.99234791e-01,   7.65208519e-04],
       [  9.97959444e-01,   2.04055605e-03],
       [  9.94898610e-01,   5.10139013e-03],
       [  9.96556562e-01,   3.44343834e-03],
       [  9.66203290e-01,   3.37967096e-02],
       [  9.53959954e-01,   4.60400459e-02],
       [  7.16745313e-01,   2.83254687e-01],
       [  9.60974366e-01,   3.90256345e-02],
       [  7.86379288e-01,   2.13620712e-01],
       [  8.77694172e-01,   1.22305828e-01],
       [  1.00000000e+00,   0.00000000e+00],
       [  9.46052799e-01,   5.39472006e-02],
       [  8.23109297e-01,   1.76890703e-01],
       [  9.40951409e-01,   5.90485907e-02],
       [  9.98724652e-01,   1.27534753e-03],
       [  1.46537431e-01,   8.53462569e-01],
       [  9.95663818e-01,   4.33618161e-03],
       [  9.37380436e-01,   6.26195638e-02],
       [  9.91582706e-01,   8.41729371e-03],
       [  9.89159546e-01,   1.08404540e-02],
       [  9.35339880e-01,   6.46601199e-02],
       [  9.99872465e-01,   1.27534753e-04],
       [  8.81520214e-01,   1.18479786e-01],
       [  7.49011606e-01,   2.50988394e-01],
       [  9.85333503e-01,   1.46664966e-02],
       [  9.89032011e-01,   1.09679888e-02],
       [  9.68116312e-01,   3.18836883e-02],
       [  9.82527739e-01,   1.74722612e-02],
       [  9.99872465e-01,   1.27534753e-04],
       [  7.62912894e-01,   2.37087106e-01],
       [  9.73090167e-01,   2.69098329e-02],
       [  8.74633338e-01,   1.25366662e-01],
       [  9.63907665e-01,   3.60923352e-02],
       [  9.59188879e-01,   4.08111210e-02],
       [  9.75640862e-01,   2.43591379e-02],
       [  2.45249330e-01,   7.54750670e-01],
       [  8.90830251e-01,   1.09169749e-01],
       [  9.95281214e-01,   4.71878587e-03],
       [  9.91455172e-01,   8.54482847e-03],
       [  9.72197424e-01,   2.78025762e-02],
       [  9.04986609e-01,   9.50133911e-02],
       [  9.95408749e-01,   4.59125112e-03],
       [  9.64800408e-01,   3.51995919e-02],
       [  9.50644051e-01,   4.93559495e-02],
       [  9.96811631e-01,   3.18836883e-03],
       [  9.23351613e-02,   9.07664839e-01],
       [  9.99107257e-01,   8.92743273e-04],
       [  9.95026145e-01,   4.97385538e-03],
       [  9.97449305e-01,   2.55069506e-03],
       [  9.99744930e-01,   2.55069506e-04],
       [  9.96811631e-01,   3.18836883e-03],
       [  9.99744930e-01,   2.55069506e-04],
       [  9.99489861e-01,   5.10139013e-04],
       [  9.98852187e-01,   1.14781278e-03],
       [  9.96173957e-01,   3.82604260e-03],
       [  9.98469583e-01,   1.53041704e-03],
       [  9.94388471e-01,   5.61152914e-03],
       [  9.98979722e-01,   1.02027803e-03],
       [  9.99617396e-01,   3.82604260e-04],
       [  9.99489861e-01,   5.10139013e-04],
       [  1.00000000e+00,   0.00000000e+00],
       [  9.99872465e-01,   1.27534753e-04],
       [  9.99234791e-01,   7.65208519e-04],
       [  9.99617396e-01,   3.82604260e-04],
       [  9.94898610e-01,   5.10139013e-03],
       [  9.97704374e-01,   2.29562556e-03],
       [  9.99362326e-01,   6.37673766e-04],
       [  9.96811631e-01,   3.18836883e-03],
       [  9.98724652e-01,   1.27534753e-03],
       [  9.96939166e-01,   3.06083408e-03],
       [  9.99744930e-01,   2.55069506e-04],
       [  9.95791353e-01,   4.20864686e-03],
       [  9.99744930e-01,   2.55069506e-04],
       [  1.00000000e+00,   0.00000000e+00],
       [  9.99744930e-01,   2.55069506e-04],
       [  9.92220380e-01,   7.77961995e-03],
       [  9.98469583e-01,   1.53041704e-03],
       [  9.99489861e-01,   5.10139013e-04],
       [  9.98469583e-01,   1.53041704e-03],
       [  9.99617396e-01,   3.82604260e-04],
       [  9.97959444e-01,   2.04055605e-03],
       [  9.97449305e-01,   2.55069506e-03],
       [  9.99617396e-01,   3.82604260e-04],
       [  9.99744930e-01,   2.55069506e-04],
       [  8.54482847e-02,   9.14551715e-01],
       [  9.99362326e-01,   6.37673766e-04],
       [  9.99234791e-01,   7.65208519e-04],
       [  9.81379926e-01,   1.86200740e-02]])
discrete_false = np.array([[  0.00000000e+00,   0.00000000e+00],
       [  0.00000000e+00,   0.00000000e+00],
       [  3.88025890e-01,   6.11974110e-01],
       [  0.00000000e+00,   0.00000000e+00],
       [  0.00000000e+00,   0.00000000e+00],
       [  0.00000000e+00,   0.00000000e+00],
       [  9.76173139e-01,   2.38268608e-02],
       [  9.40291262e-01,   5.97087379e-02],
       [  9.99716828e-01,   2.83171521e-04],
       [  2.82645631e-01,   7.17354369e-01],
       [  9.80016181e-01,   1.99838188e-02],
       [  9.26496764e-01,   7.35032362e-02],
       [  9.61771845e-01,   3.82281553e-02],
       [  9.99433657e-01,   5.66343042e-04],
       [  9.33454693e-01,   6.65453074e-02],
       [  9.64765372e-01,   3.52346278e-02],
       [  9.54894822e-01,   4.51051780e-02],
       [  9.83818770e-01,   1.61812298e-02],
       [  9.93446602e-01,   6.55339806e-03],
       [  9.87176375e-01,   1.28236246e-02],
       [  9.75485437e-01,   2.45145631e-02],
       [  9.80299353e-01,   1.97006472e-02],
       [  9.67556634e-01,   3.24433657e-02],
       [  9.58697411e-01,   4.13025890e-02],
       [  8.73220065e-01,   1.26779935e-01],
       [  9.95671521e-01,   4.32847896e-03],
       [  6.42961165e-01,   3.57038835e-01],
       [  9.69093851e-01,   3.09061489e-02],
       [  9.97936893e-01,   2.06310680e-03],
       [  9.93810680e-01,   6.18932039e-03],
       [  7.61165049e-01,   2.38834951e-01],
       [  8.38996764e-01,   1.61003236e-01],
       [  9.99474110e-01,   5.25889968e-04],
       [  6.64886731e-01,   3.35113269e-01],
       [  9.84466019e-01,   1.55339806e-02],
       [  5.87702265e-01,   4.12297735e-01],
       [  9.61205502e-01,   3.87944984e-02],
       [  9.63268608e-01,   3.67313916e-02],
       [  8.68001618e-01,   1.31998382e-01],
       [  9.99676375e-01,   3.23624595e-04],
       [  8.71763754e-01,   1.28236246e-01],
       [  9.15129450e-01,   8.48705502e-02],
       [  9.64441748e-01,   3.55582524e-02],
       [  9.48058252e-01,   5.19417476e-02],
       [  9.29126214e-01,   7.08737864e-02],
       [  8.72249191e-01,   1.27750809e-01],
       [  9.94012945e-01,   5.98705502e-03],
       [  9.07726537e-01,   9.22734628e-02],
       [  9.82281553e-01,   1.77184466e-02],
       [  8.92111650e-01,   1.07888350e-01],
       [  9.73907767e-01,   2.60922330e-02],
       [  9.48341424e-01,   5.16585761e-02],
       [  9.33171521e-01,   6.68284790e-02],
       [  7.05703883e-01,   2.94296117e-01],
       [  6.98665049e-01,   3.01334951e-01],
       [  9.61812298e-01,   3.81877023e-02],
       [  7.97694175e-01,   2.02305825e-01],
       [  8.69417476e-01,   1.30582524e-01],
       [  9.66707120e-01,   3.32928803e-02],
       [  9.88875405e-01,   1.11245955e-02],
       [  9.69134304e-01,   3.08656958e-02],
       [  8.89279935e-01,   1.10720065e-01],
       [  9.90048544e-01,   9.95145631e-03],
       [  1.62661812e-01,   8.37338188e-01],
       [  9.99514563e-01,   4.85436893e-04],
       [  9.96682848e-01,   3.31715210e-03],
       [  9.97775081e-01,   2.22491909e-03],
       [  9.97694175e-01,   2.30582524e-03],
       [  9.97168285e-01,   2.83171521e-03],
       [  9.97249191e-01,   2.75080906e-03],
       [  9.99029126e-01,   9.70873786e-04],
       [  9.96076052e-01,   3.92394822e-03],
       [  9.97572816e-01,   2.42718447e-03],
       [  9.99312298e-01,   6.87702265e-04],
       [  9.96237864e-01,   3.76213592e-03],
       [  9.99150485e-01,   8.49514563e-04],
       [  9.97532362e-01,   2.46763754e-03],
       [  9.98381877e-01,   1.61812298e-03],
       [  9.99959547e-01,   4.04530744e-05],
       [  9.99514563e-01,   4.85436893e-04],
       [  9.99433657e-01,   5.66343042e-04],
       [  9.99595469e-01,   4.04530744e-04],
       [  9.97572816e-01,   2.42718447e-03],
       [  9.98988673e-01,   1.01132686e-03],
       [  9.99231392e-01,   7.68608414e-04],
       [  9.98058252e-01,   1.94174757e-03],
       [  9.97127832e-01,   2.87216828e-03],
       [  9.98462783e-01,   1.53721683e-03],
       [  9.99352751e-01,   6.47249191e-04],
       [  9.75323625e-01,   2.46763754e-02],
       [  9.98705502e-01,   1.29449838e-03],
       [  9.99433657e-01,   5.66343042e-04],
       [  9.98826861e-01,   1.17313916e-03],
       [  9.94457929e-01,   5.54207120e-03],
       [  9.98058252e-01,   1.94174757e-03],
       [  9.98665049e-01,   1.33495146e-03],
       [  9.95873786e-01,   4.12621359e-03],
       [  9.99635922e-01,   3.64077670e-04],
       [  9.97411003e-01,   2.58899676e-03],
       [  9.98745955e-01,   1.25404531e-03],
       [  9.99393204e-01,   6.06796117e-04],
       [  9.99312298e-01,   6.87702265e-04],
       [  1.10072816e-01,   8.89927184e-01],
       [  9.97491909e-01,   2.50809061e-03],
       [  9.99595469e-01,   4.04530744e-04],
       [  9.82322006e-01,   1.76779935e-02]])



def sigmoid(z):
        sigma_z = 1/(1+np.exp(-z))
        return(np.clip(sigma_z,1e-14,1.0-1e-14))

def predict_true():
        x_5 = np.r_[x[0:2,:],x[3:6,:]]
        z = np.dot(w_true,x_5) + b_true
        p_continuous = sigmoid(z)
        if (p_discrete_true*P_true == 0):
                p_discrete = 0
        else:
                p_discrete = 1/(1+(p_discrete_false*P_false)/(p_discrete_true*P_true))
        return(p_continuous*p_discrete)

def predict_false():
        x_5 = np.r_[x[0:2,:],x[3:6,:]]
        z = np.dot(w_false,x_5) + b_false
        p_continuous = sigmoid(z)
        if (p_discrete_false*P_false == 0):
                p_discrete = 0
        else:
                p_discrete = 1/(1+(p_discrete_true*P_true)/(p_discrete_false*P_false))
        return(p_continuous*p_discrete)

def check(B,C):
        a = B >= C
        return(a)

print("id,label")
for i in range(total):
        x = XTest[:,i]
        p_discrete_true = x[2,0]*discrete_true[2][1]+(1-x[2,0])*discrete_true[2][0]
        for j in range(6,106,1):
                p_discrete_true *= (x[j,0]*discrete_true[j][1]+(1-x[j,0])*discrete_true[j][0])
        p_discrete_false = x[2,0]*discrete_false[2][1]+(1-x[2,0])*discrete_false[2][0]
        for j in range(6,106,1):
                p_discrete_false *= (x[j,0]*discrete_false[j][1]+(1-x[j,0])*discrete_false[j][0])
        y_true = predict_true()
        y_false = predict_false()
        y_hat = check(y_true,y_false)
        if y_hat >= 0.5:
              print("%s,%d"%(i+1,1))
        else:  
              print("%s,%d"%(i+1,0))        


